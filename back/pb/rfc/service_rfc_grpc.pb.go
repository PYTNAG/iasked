// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.25.0
// source: rfc/service_rfc.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RfcAPIClient is the client API for RfcAPI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RfcAPIClient interface {
	CreateRFC(ctx context.Context, in *CreateRFCRequest, opts ...grpc.CallOption) (*CreateRFCResponse, error)
	GetLastRFCs(ctx context.Context, in *GetLastRFCsRequest, opts ...grpc.CallOption) (RfcAPI_GetLastRFCsClient, error)
	DeleteRFC(ctx context.Context, in *DeleteRFCRequest, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type rfcAPIClient struct {
	cc grpc.ClientConnInterface
}

func NewRfcAPIClient(cc grpc.ClientConnInterface) RfcAPIClient {
	return &rfcAPIClient{cc}
}

func (c *rfcAPIClient) CreateRFC(ctx context.Context, in *CreateRFCRequest, opts ...grpc.CallOption) (*CreateRFCResponse, error) {
	out := new(CreateRFCResponse)
	err := c.cc.Invoke(ctx, "/pb.RfcAPI/CreateRFC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *rfcAPIClient) GetLastRFCs(ctx context.Context, in *GetLastRFCsRequest, opts ...grpc.CallOption) (RfcAPI_GetLastRFCsClient, error) {
	stream, err := c.cc.NewStream(ctx, &RfcAPI_ServiceDesc.Streams[0], "/pb.RfcAPI/GetLastRFCs", opts...)
	if err != nil {
		return nil, err
	}
	x := &rfcAPIGetLastRFCsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RfcAPI_GetLastRFCsClient interface {
	Recv() (*RFC, error)
	grpc.ClientStream
}

type rfcAPIGetLastRFCsClient struct {
	grpc.ClientStream
}

func (x *rfcAPIGetLastRFCsClient) Recv() (*RFC, error) {
	m := new(RFC)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *rfcAPIClient) DeleteRFC(ctx context.Context, in *DeleteRFCRequest, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, "/pb.RfcAPI/DeleteRFC", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RfcAPIServer is the server API for RfcAPI service.
// All implementations must embed UnimplementedRfcAPIServer
// for forward compatibility
type RfcAPIServer interface {
	CreateRFC(context.Context, *CreateRFCRequest) (*CreateRFCResponse, error)
	GetLastRFCs(*GetLastRFCsRequest, RfcAPI_GetLastRFCsServer) error
	DeleteRFC(context.Context, *DeleteRFCRequest) (*emptypb.Empty, error)
	mustEmbedUnimplementedRfcAPIServer()
}

// UnimplementedRfcAPIServer must be embedded to have forward compatible implementations.
type UnimplementedRfcAPIServer struct {
}

func (UnimplementedRfcAPIServer) CreateRFC(context.Context, *CreateRFCRequest) (*CreateRFCResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRFC not implemented")
}
func (UnimplementedRfcAPIServer) GetLastRFCs(*GetLastRFCsRequest, RfcAPI_GetLastRFCsServer) error {
	return status.Errorf(codes.Unimplemented, "method GetLastRFCs not implemented")
}
func (UnimplementedRfcAPIServer) DeleteRFC(context.Context, *DeleteRFCRequest) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteRFC not implemented")
}
func (UnimplementedRfcAPIServer) mustEmbedUnimplementedRfcAPIServer() {}

// UnsafeRfcAPIServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RfcAPIServer will
// result in compilation errors.
type UnsafeRfcAPIServer interface {
	mustEmbedUnimplementedRfcAPIServer()
}

func RegisterRfcAPIServer(s grpc.ServiceRegistrar, srv RfcAPIServer) {
	s.RegisterService(&RfcAPI_ServiceDesc, srv)
}

func _RfcAPI_CreateRFC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRFCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfcAPIServer).CreateRFC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RfcAPI/CreateRFC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfcAPIServer).CreateRFC(ctx, req.(*CreateRFCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RfcAPI_GetLastRFCs_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetLastRFCsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RfcAPIServer).GetLastRFCs(m, &rfcAPIGetLastRFCsServer{stream})
}

type RfcAPI_GetLastRFCsServer interface {
	Send(*RFC) error
	grpc.ServerStream
}

type rfcAPIGetLastRFCsServer struct {
	grpc.ServerStream
}

func (x *rfcAPIGetLastRFCsServer) Send(m *RFC) error {
	return x.ServerStream.SendMsg(m)
}

func _RfcAPI_DeleteRFC_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRFCRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RfcAPIServer).DeleteRFC(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.RfcAPI/DeleteRFC",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RfcAPIServer).DeleteRFC(ctx, req.(*DeleteRFCRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// RfcAPI_ServiceDesc is the grpc.ServiceDesc for RfcAPI service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RfcAPI_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pb.RfcAPI",
	HandlerType: (*RfcAPIServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRFC",
			Handler:    _RfcAPI_CreateRFC_Handler,
		},
		{
			MethodName: "DeleteRFC",
			Handler:    _RfcAPI_DeleteRFC_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetLastRFCs",
			Handler:       _RfcAPI_GetLastRFCs_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rfc/service_rfc.proto",
}
